[{"/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/index.js":"1","/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/App.js":"2","/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/reportWebVitals.js":"3","/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/index.js":"4","/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/App.js":"5","/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/reportWebVitals.js":"6"},{"size":535,"mtime":1670280017324,"results":"7","hashOfConfig":"8"},{"size":3991,"mtime":1670711853825,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1670280017325,"results":"10","hashOfConfig":"8"},{"size":535,"mtime":1670280017324,"results":"11","hashOfConfig":"12"},{"size":3991,"mtime":1670711853825,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1670280017325,"results":"14","hashOfConfig":"12"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"fj4wv5",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t9f16i",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/index.js",[],[],[],"/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/App.js",["35"],[],"/Users/mattiamariantoni/Desktop/Projects/hello_world_web3/src/reportWebVitals.js",[],[],"/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/index.js",[],[],"/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/App.js",["36"],[],"// import logo from './logo.svg';\nimport './App.css';\n\nimport { ethers } from 'ethers';\nimport React, {useState} from 'react';\n// import contractABI from './abi.json';\nimport contractABIstaking from './abi_staking.json';\n\n// This function detects most providers injected at window.ethereum\n// import detectEthereumProvider from '@metamask/detect-provider';\n\n// const contractAdress = '0x0ea7396Fc14e60a98EE1e020A67EEf3907Ada8Ac';\nconst contractAdressStaking = '0x1D37813CB62DD4Bf6CD065e582AA9cC87AD1f135';\n\nlet provider = new ethers.providers.Web3Provider(window.ethereum);\nlet contract = new ethers.Contract(contractAdressStaking, contractABIstaking, provider);\nlet signer;\n\n\n// const loadData = async() => {\n//   // const provider = new ethers.providers.Web3Provider(window.ethereum)\n//   const provider = new ethers.providers.Web3Provider(window.ethereum)\n//   const contract = new ethers.Contract(contractAdress, contractABI, provider)\n//   const greeting = await contract.hello()\n//   alert(greeting);\n// }\n\n// const metamask_test = async() => {\n\n//   const provider = new ethers.providers.Web3Provider(window.ethereum)\n\n//   await provider.send(\"eth_requestAccounts\", []);\n\n//   const signer = provider.getSigner()\n\n//   if (provider) {\n//     // From now on, this should always be true:\n//     alert(provider.isMetaMask);\n//     // alert('MetaMask found');\n//   } else {\n//     alert('Please install MetaMask!');\n//   }\n// }\n\nfunction App() {\n  const [donated,setDonated] = useState(0);\n  const [lidoBalance,setLidoBalance] = useState(0);\n  const [surplus,setSurplus] = useState(0);\n\n  const connect = async() => {\n    await provider.send(\"eth_requestAccounts\", []);\n    signer = provider.getSigner();\n    contract = new ethers.Contract(contractAdressStaking, contractABIstaking, signer);\n    const userAdress = await signer.getAddress();\n    console.log(userAdress);\n    await updateBalances();\n  }\n  \n  const deposit = async() => {\n    let userAmount = document.getElementById('deposit-amount').value;\n    const weiAmount = ethers.utils.parseEther(userAmount);\n    console.log(await contract.deployed())\n    const tx = await contract.deposit({value: weiAmount});\n    const receipt = await tx.wait();\n    await updateBalances();\n  }\n  \n  const withdraw = async() => {\n    await contract.withdraw();\n    await updateBalances();\n  }\n  \n  const updateBalances = async() => {\n    const donated = await contract.donated();\n    setDonated(ethers.utils.formatEther(donated));\n    const lidoBalance = await contract.lidoBalance();\n    setLidoBalance(ethers.utils.formatEther(lidoBalance));\n    const surplus = lidoBalance.sub(donated);\n    setSurplus(ethers.utils.formatEther(surplus));\n  }\n\n  setTimeout(() => {\n    updateBalances();\n  },\n  2000);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1><span className='blue'>App</span> to stake</h1>\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n        <p>\n          App to stake and withdraw earnings.\n        </p>\n        {/* <button onClick={loadData}>Click me</button>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a> */}\n        <div className='App-body'>\n          <div className='App-balances'>\n            Donated: {donated} ETH<br />\n            Balance: {lidoBalance} ETH<br />\n            Surplus: {surplus} ETH<br />\n          </div>\n          <div className='App-button-box'>\n            <button onClick={connect}>Connect Wallet</button>\n          </div>\n          <div className='App-button-box'>\n          <input type=\"text\" id=\"deposit-amount\" placeholder='ETH' /> <br />\n            <button onClick={deposit}>Deposit</button>\n          </div>\n          <div className='App-button-box'>\n            <button onClick={withdraw}>Withdraw</button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mattiamariantoni/Documents/GitHub/Staking_App/src/reportWebVitals.js",[],[],{"ruleId":"37","severity":1,"message":"38","line":64,"column":11,"nodeType":"39","messageId":"40","endLine":64,"endColumn":18},{"ruleId":"37","severity":1,"message":"38","line":64,"column":11,"nodeType":"39","messageId":"40","endLine":64,"endColumn":18},"no-unused-vars","'receipt' is assigned a value but never used.","Identifier","unusedVar"]